/*! Minimal DOMPurify-compatible sanitizer for offline use. Inspired by DOMPurify (Apache 2.0). */
(function (global) {
  'use strict';

  const ALLOWED_TAGS = new Set([
    'a', 'abbr', 'b', 'blockquote', 'br', 'code', 'del', 'div', 'em', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6',
    'hr', 'i', 'img', 'li', 'ol', 'p', 'pre', 'section', 'span', 'strong', 'sub', 'sup', 'table', 'tbody',
    'td', 'th', 'thead', 'tr', 'ul'
  ]);

  const ALLOWED_ATTRS = new Set([
    'align', 'alt', 'class', 'colspan', 'href', 'rowspan', 'src', 'style', 'title'
  ]);

  const URI_ATTRS = new Set(['href', 'src']);

  function isSafeUrl(value) {
    const trimmed = value.trim().toLowerCase();
    if (trimmed.startsWith('javascript:')) return false;
    if (trimmed.startsWith('data:')) return false;
    return true;
  }

  function cleanNode(node) {
    const walker = document.createTreeWalker(node, NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT | NodeFilter.SHOW_TEXT, null);
    const toRemove = [];

    while (walker.nextNode()) {
      const current = walker.currentNode;
      if (current.nodeType === Node.COMMENT_NODE) {
        toRemove.push(current);
        continue;
      }
      if (current.nodeType === Node.TEXT_NODE) {
        continue;
      }
      const tagName = current.tagName.toLowerCase();
      if (!ALLOWED_TAGS.has(tagName)) {
        toRemove.push(current);
        continue;
      }
      Array.from(current.attributes).forEach(function (attr) {
        const name = attr.name.toLowerCase();
        if (!ALLOWED_ATTRS.has(name) || name.startsWith('on')) {
          current.removeAttribute(attr.name);
          return;
        }
        if (URI_ATTRS.has(name) && !isSafeUrl(attr.value || '')) {
          current.removeAttribute(attr.name);
        }
      });
    }

    toRemove.forEach(function (nodeToRemove) {
      if (nodeToRemove.parentNode) {
        if (nodeToRemove.nodeType === Node.ELEMENT_NODE) {
          while (nodeToRemove.firstChild) {
            nodeToRemove.parentNode.insertBefore(nodeToRemove.firstChild, nodeToRemove);
          }
        }
        nodeToRemove.parentNode.removeChild(nodeToRemove);
      }
    });
  }

  function sanitize(dirty, _options) {
    if (typeof dirty !== 'string') {
      return '';
    }
    const template = document.createElement('template');
    template.innerHTML = dirty;
    cleanNode(template.content);
    return template.innerHTML;
  }

  const DOMPurify = { sanitize: sanitize };

  if (typeof module !== 'undefined' && module.exports) {
    module.exports = DOMPurify;
  } else {
    global.DOMPurify = DOMPurify;
  }
})(typeof window !== 'undefined' ? window : globalThis);
